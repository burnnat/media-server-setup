esphome:
  name: white_noise
  platform: ESP8266
  board: d1_mini
  on_boot:
    - priority: 800
      then:
        - output.turn_off: audio_enable
    - priority: -10
      then:
        - sensor.template.publish:
            id: volume_sensor
            state: !lambda 'return id(current_volume);'
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "White Noise Fallback Hotspot"
    password: "7iqs83F0Ful4"

captive_portal:
logger:
ota:

globals:
 - id: current_volume
   type: int
   restore_value: true
   initial_value: '20'

api:
  services:
    - service: set_volume
      variables:
        volume: int
      then:
        - lambda: |-
            id(current_volume) = volume;
            ESP_LOGD("main", "Setting volume level: %d", id(current_volume));
        - dfplayer.set_volume:
            volume: !lambda 'return id(current_volume);'
        - sensor.template.publish:
            id: volume_sensor
            state: !lambda 'return id(current_volume);'

uart:
  tx_pin: D1
  rx_pin: D2
  baud_rate: 9600

status_led:
  pin:
    number: GPIO2
    inverted: true

dfplayer:

output:
  - platform: gpio
    id: led
    pin: D5
    
  - platform: gpio
    id: audio_enable
    pin: D3

binary_sensor:
  - platform: gpio
    id: reset
    name: White Noise Reset
    pin:
      number: D6
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_release:
      then:
        - switch.toggle: track_airplane

sensor:
  - platform: template
    name: White Noise Volume
    id: volume_sensor

light:
  - platform: binary
    id: status
    name: White Noise Status
    output: led

switch:
  - platform: template
    id: track_airplane
    name: Airplane Cabin
    optimistic: true
    turn_on_action:
      then:
        - light.turn_on: status
        - logger.log:
            format: "Setting volume level for playback: %d"
            args: [ 'id(current_volume)' ]
        - dfplayer.set_volume: !lambda 'return id(current_volume);'
        - wait_until:
            switch.is_on: track_airplane
        - logger.log: "Starting intro track"
        - output.turn_on: audio_enable
        - dfplayer.play: 1
        - delay: 2900ms
        - while: 
            condition:
              switch.is_on: track_airplane
            then:
              - logger.log: "Looping main track"
              - dfplayer.play: 2
              - delay: 1390s
    
    turn_off_action:
      then:
        - light.turn_off: status
        - logger.log: "Starting outro track"
        - dfplayer.play: 3
        - wait_until:
            not:
              dfplayer.is_playing
        - output.turn_off: audio_enable
        - logger.log: "Playback complete"
